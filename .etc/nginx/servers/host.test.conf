server {
  listen                    443 ssl;
  listen                    [::]:443 ssl;
  server_name               *.test;
  root                      /usr/local/var/www/$host;
  access_log                /usr/local/var/log/nginx/host.test.access.log vhost;
  error_log                 /usr/local/var/log/nginx/host.test.error.log debug;

  ssl_certificate           /usr/local/etc/openssl/certs/host.test.crt;
  ssl_certificate_key       /usr/local/etc/openssl/private/host.test.key;

  ssl_session_cache         shared:SSL:1m;
  ssl_session_timeout       5m;

  ssl_protocols             SSLv2 SSLv3 TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers               HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers on;

  location = /favicon.ico {
    access_log              off;
    log_not_found           off;
  }

  location = /robots.txt {
    access_log              off;
    allow                   all;
    log_not_found           off;
  }

  location ~* \.(txt|log)$ {
    allow                   127.0.0.1;
    deny                    all;
  }

  location ~ \..*/.*\.php$ {
    return 403;
  }

  location ~ ^/sites/.*/private/ {
    return 403;
  }

  # Block access to scripts in site files directory.
  location ~ ^/sites/[^/]+/files/.*\.php$ {
    deny all;
  }

  # Allow "Well-Known URIs" as per RFC 5785.
  location ~* ^/.well-known/ {
    allow all;
  }

  # Block access to "hidden" files and directories whose names begin with a
  # period. This includes directories used by version control systems such
  # as Subversion or Git to store control files.
  location ~ (^|/)\. {
    return 403;
  }

  location / {
    # try_files $uri @rewrite;                  # For Drupal <= 6
    # try_files $uri /index.php?$query_string;  # For Drupal >= 7
    try_files $uri @drupal;
    index                   index.html index.php;
  }

  location @drupal {
    rewrite ^/r/([a-z]+)$ /r/$1/ permanent;
    rewrite ^/r/([a-z]+)/.*$ /r/$1/index.php?$query_string last;
    rewrite ^ /index.php?$query_string last;
  }

  location @rewrite {
    # rewrite ^/(.*)$ /index.php?q=$1;          # For Drupal <= 6
    rewrite ^ /index.php;                       # For Drupal >= 7
  }

  # Don't allow direct access to PHP files in the vendor directory.
  location ~ /vendor/.*\.php$ {
    deny all;
    return 404;
  }

  # Protect files and directories from prying eyes.
  location ~* \.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?$|composer\.(lock|json)$|web\.config$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template)$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
    deny all;
    return 404;
  }

  # In Drupal 8, we must also match new paths where the '.php' appears in the middle,
  # such as update.php/selection. The rule we use is strict, and only allows this pattern
  # with the update.php front controller.  This allows legacy path aliases in the form of
  # blog/index.php/legacy-path to continue to route to Drupal nodes. If you do not have
  # any paths like that, then you might prefer to use a laxer rule, such as:
  #   location ~ \.php(/|$) {
  # The laxer rule will continue to work if Drupal uses this new URL pattern with front
  # controllers other than update.php in a future release.
  location ~ '\.php$|^/update.php' {
    fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
    # Ensure the php file exists. Mitigates CVE-2019-11043.
    try_files $fastcgi_script_name =404;
    # Security note: If you're running a version of PHP older than the
    # latest 5.3, you should have "cgi.fix_pathinfo = 0;" in php.ini.
    # See http://serverfault.com/q/627903/94922 for details.
    fastcgi_intercept_errors on;
    fastcgi_pass            unix:/usr/local/var/run/php-fpm.sock;
    # Block httpoxy attacks. See https://httpoxy.org/.
    fastcgi_param           HTTP_PROXY "";
    fastcgi_param           PATH_INFO $fastcgi_path_info;
    fastcgi_param           QUERY_STRING $query_string;
    #fastcgi_param           SCRIPT_FILENAME $request_filename;
    fastcgi_param           SCRIPT_FILENAME $document_root$fastcgi_script_name;
    include                 fastcgi_params;
  }

  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
    try_files $uri @rewrite;
    expires                 max;
    log_not_found           off;
  }

  # Fighting with Styles? This little gem is amazing.
  # location ~ ^/sites/.*/files/imagecache/ {     # For Drupal <= 6
  location ~ ^/sites/.*/files/styles/ {           # For Drupal >= 7
    try_files $uri @rewrite;
  }

  # Handle private files through Drupal. Private file's path can come
  # with a language prefix.
  location ~ ^(/[a-z\-]+)?/system/files/ {        # For Drupal >= 7
    try_files $uri /index.php?$query_string;
  }

  # Enforce clean URLs
  # Removes index.php from urls like www.example.com/index.php/my-page --> www.example.com/my-page
  # Could be done with 301 for permanent or other redirect codes.
  if ($request_uri ~* "^(.*/)index\.php/(.*)") {
    return 307 $1$2;
  }

  location ~ /\. {
    deny                    all;
  }
}
