#!/bin/bash

#    Environment Provisioner - Provision development environment.
#    Copyright (C) 2015-2018  Richard Huang <rickypc@users.noreply.github.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COMPOSER_DIR=$HOME/.composer
PHP_VERSION=7.1

# Source function library.
. functions

# Xcode command line tools, you are most likely need to install this manually from Apple Developer download.
# xcode-select --install

# Ensure /usr/local/sbin exists.
if [ ! -d /usr/local/sbin ]; then
    sudo mkdir -p /usr/local/sbin
    sudo chown $(id -u):admin /usr/local/sbin
fi

step "Install latest Homebrew"
    if ! [ -x "$(command -v brew)" ]; then
        try ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" </dev/null
    fi

    PREFIX=$(brew --prefix)
    # Turn off Homebrew analytics.
    try brew analytics off
    # Update to latest Homebrew and latest formulaes as well
    try brew update
    # Upgrade all installed unpinned brews
    try brew upgrade --cleanup --ignore-pinned
    # Cleanup old files
    try brew cleanup -s
    # Cleanup old symlinks
    try brew prune
    # Check Homebrew installation
    try brew doctor
next

step "Tap Homebrew services repository"
    try brew tap homebrew/services
next

if [ -z "$(brew ls --versions openssl)" ]; then
    step "Install latest OpenSSL"
        try brew install openssl
        SSL_PREFIX=$PREFIX/etc/openssl
        try mkdir -p $SSL_PREFIX/certs $SSL_PREFIX/private
        if [ ! -f $SSL_PREFIX/private/localhost.key ]; then
            openssl req -new -newkey rsa:4096 -days 1825 -nodes -x509 -subj "/C=US/ST=CA/OU=Technology/CN=localhost" -keyout $SSL_PREFIX/private/localhost.key -out $SSL_PREFIX/certs/localhost.crt
        fi
        if [ ! -f $SSL_PREFIX/private/host.test.key ]; then
            openssl req -new -newkey rsa:4096 -days 1825 -nodes -x509 -subj "/C=US/ST=CA/OU=Technology/CN=*.test" -keyout $SSL_PREFIX/private/host.test.key -out $SSL_PREFIX/certs/host.test.crt
        fi
    next
fi

if [ -z "$(brew ls --versions node)" ]; then
    step "Install NodeJS"
        try brew install node
    next
fi

if [ -z "$(brew ls --versions python@2)" ]; then
    step "Install Python 2"
        try brew install python@2
    next
fi

if [ -z "$(brew ls --versions python@3)" ]; then
    step "Install Python 3"
        try brew install python@3
    next
fi

if [ -z "$(brew ls --versions php@$PHP_VERSION)" ]; then
    step "Install PHP v$PHP_VERSION"
        try brew install php@$PHP_VERSION
        PHP_INI=$PREFIX/etc/php/$PHP_VERSION/php.ini
        # Essentials configs.
        content_replace "s{;date.timezone =}{date.timezone = UTC}" $PHP_INI
        content_replace "s{;error_log = php_errors.log}{error_log = $PREFIX/var/log/php_errors.log}" $PHP_INI
        # Size matters.
        content_replace "s{post_max_size = 8M}{post_max_size = 100M}" $PHP_INI
        content_replace "s{upload_max_filesize = 2M}{upload_max_filesize = 100M}" $PHP_INI
        # OPCache configs.
        content_replace "s{;opcache.enable=1}{opcache.enable=0}" $PHP_INI
        # content_replace "s{;opcache.enable_cli=0}{opcache.enable_cli=1}" $PHP_INI
        content_replace "s{;opcache.memory_consumption=128}{opcache.memory_consumption=128}" $PHP_INI
        content_replace "s{;opcache.interned_strings_buffer=8}{opcache.interned_strings_buffer=8}" $PHP_INI
        content_replace "s{;opcache.max_accelerated_files=10000}{opcache.max_accelerated_files=10000}" $PHP_INI
        # content_replace "s{;opcache.revalidate_freq=2}{opcache.revalidate_freq=60}" $PHP_INI
        content_replace "s{;opcache.fast_shutdown=0}{opcache.fast_shutdown=1}" $PHP_INI
        # Links and install extensions.
        try brew link --force --overwrite php@$PHP_VERSION
        try mkdir -p /usr/local/lib/php/pecl
        try pecl channel-update pecl.php.net
        if [ -z "$(php -i | grep -w ast)" ]; then
            try pecl install ast
        fi
        if [ -z "$(php -i | grep -w mcrypt)" ]; then
            try pecl install mcrypt
        fi
        # Replace socket php-fpm location.
        content_replace "s{^listen = 127.0.0.1:9000}{listen = $PREFIX/var/run/php-fpm.sock}g" $PREFIX/etc/php/$PHP_VERSION/php-fpm.d/www.conf
        try brew services start php@$PHP_VERSION
    next
fi

if [ -z "$(brew ls --versions composer)" ]; then
    step "Install latest Composer"
        try brew install composer
    next
fi

step "Download latest PHP dependencies"
    try composer global require drupal/coder drush/drush:8.* phan/phan phpmd/phpmd
    try $COMPOSER_DIR/vendor/bin/phpcs --config-set installed_paths $COMPOSER_DIR/vendor/drupal/coder/coder_sniffer
next

if [ -z "$(brew ls --versions mysql)" ]; then
    step "Install latest MySQL"
        try brew install mysql
        try brew services start mysql
    next
    echo "Waiting for MySQL to be ready..."
    while !(mysqladmin ping -s); do
        sleep 5
    done
    mysql_secure_installation
    # Further MySQL config customization.
    if [ -z "$(grep -o "explicit_defaults_for_timestamp = 1" $PREFIX/etc/my.cnf)" ]; then
        echo 'explicit_defaults_for_timestamp = 1' >> $PREFIX/etc/my.cnf
    fi
fi

PMA_DIR=$PREFIX/var/www/phpMyAdmin

step "Install latest PHPMyAdmin"
    PMA_ZIP=phpMyAdmin-latest-all-languages.zip
    try curl -LsO "https://www.phpmyadmin.net/downloads/$PMA_ZIP"
    try unzip -oq $PMA_ZIP -d $PREFIX/var/www && rm -f $PMA_ZIP && rm -rf $PMA_DIR
    try mv $PMA_DIR-*-all-languages $PMA_DIR
next

# Configure latest PHPMyAdmin.
echo -n "MySQL Password: "
read -s MYSQL_PASSWD
echo
cp $PMA_DIR/config.sample.inc.php $PMA_DIR/config.inc.php
# Replace auth_type and credentials.
perl -p -i.bak -e "s{^\$cfg.+auth_type'\] = 'cookie';}{\\\$cfg\['Servers'\]\[\\\$i\]\['auth_type'\] = 'config';\n\\\$cfg\['Servers'\]\[\\\$i\]\['user'\] = 'root';\n\\\$cfg\['Servers'\]\[\\\$i\]\['password'\] = '$MYSQL_PASSWD';}g" $PMA_DIR/config.inc.php

# Default MySQL user login credentials.
if [ ! -f $HOME/.my.cnf ]; then
    cat <<EOF > $HOME/.my.cnf
[mysql]
user=root
password=$MYSQL_PASSWD
[mysqladmin]
user=root
password=$MYSQL_PASSWD
EOF
    chmod 600 $HOME/.my.cnf
fi

mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '$MYSQL_PASSWD'; FLUSH PRIVILEGES;"

# Prompt for sudo password early on
sudo -s exit

if [ -z "$(brew ls --versions nginx)" ]; then
    step "Install latest Nginx"
        try brew install nginx
        try rm -f $PREFIX/var/www/index.html && ln -sf $HOME/.www/index.html $PREFIX/var/www/index.html
        try rm -f $PREFIX/var/www/phpinfo.php && ln -sf $HOME/.www/phpinfo.php $PREFIX/var/www/phpinfo.php
        try rm -f $PREFIX/etc/nginx/nginx.conf && ln -sf $HOME/.etc/nginx/nginx.conf $PREFIX/etc/nginx/nginx.conf
        if [ ! -d $PREFIX/etc/nginx/servers ]; then
            try rm -rf $PREFIX/etc/nginx/servers && ln -sf $HOME/.etc/nginx/servers $PREFIX/etc/nginx/servers
        fi

        try sudo brew services start nginx
    next
fi

if [ -z "$(brew ls --versions jq)" ]; then
    step "Install latest jq"
        try brew install jq
    next
fi

step "Download latest ChromeDriver"
    CD_URL="https://chromedriver.storage.googleapis.com"
    CD_ZIP="chromedriver_mac64.zip"
    CD_VERSION=$(curl -Ls "$CD_URL/LATEST_RELEASE")
    try curl -Lso $CD_ZIP "$CD_URL/$CD_VERSION/$CD_ZIP"
    try unzip -oq $CD_ZIP -d ~/bin && rm -f $CD_ZIP
    try chmod +x ~/bin/chromedriver
next

if [ -z "$(brew ls --versions geckodriver)" ]; then
    step "Install latest GeckoDriver"
        try brew install geckodriver
    next
fi

step "Download latest jTDS JDBC driver"
    JTDS_URL=$(curl -Ls https://api.github.com/repos/milesibastos/jTDS/releases/latest | jq -r '.assets[].browser_download_url | select(contains("dist"))')
    JTDS_ZIP="jtds.zip"
    # Remove previous version of jTDS JDBC driver
    try rm -f ~/bin/jtds-*.jar
    try curl -Lso $JTDS_ZIP "$JTDS_URL"
    try unzip -oqj $JTDS_ZIP "jtds-*.jar" -d ~/bin && rm -f $JTDS_ZIP
next

if [ -z "$(brew ls --versions selenium-server-standalone)" ]; then
    step "Install latest Selenium server standalone"
        try brew install selenium-server-standalone
    next
fi

step "Clean history and logs"
    try ~/bin/clean-hists-and-logs
next

step "Clean Docker containers and images"
    try ~/bin/docker-cleanup
next

step "Get virtualenv"
    try ~/bin/get-virtualenv
next

step "Show all files in finder"
    try ~/bin/osx-show-all-files
next
