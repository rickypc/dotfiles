#!/bin/bash

#    Environment Provisioner - Provision development environment.
#    Copyright (C) 2015-2018  Richard Huang <rickypc@users.noreply.github.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

COMPOSER_DIR=$HOME/.composer
PHP_VERSION=7.1

# Source function library.
. functions

# Xcode command line tools, you are most likely need to install this manually from Apple Developer download.
# xcode-select --install

step "Install latest Homebrew"
    if ! [ -x "$(command -v brew)" ]; then
        try ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    # Turn off Homebrew analytics.
    try brew analytics off
    # Update to latest Homebrew and latest formulaes as well
    try brew update
    # Upgrade all installed unpinned brews
    try brew upgrade --cleanup --ignore-pinned
    # Cleanup old files
    try brew cleanup
    # Cleanup old symlinks
    try brew prune
    # Check Homebrew installation
    try brew doctor
next

step "Tap Homebrew services repository"
    try brew tap homebrew/services
next

if [ -z "$(brew ls --versions autoconf)" ]; then
    step "Install latest AutoConf"
        try brew install autoconf
    next
fi

if [ -z "$(brew ls --versions openssl)" ]; then
    step "Install latest OpenSSL"
        try brew install openssl
    next
fi

if [ -z "$(brew ls --versions python@2)" ]; then
    step "Install Python 2"
        try brew install python@2
    next
fi

if [ -z "$(brew ls --versions python@3)" ]; then
    step "Install Python 3"
        try brew install python@3
    next
fi

if [ -z "$(brew ls --versions php@$PHP_VERSION)" ]; then
    step "Install PHP v$PHP_VERSION"
        try brew install php@$PHP_VERSION
        try brew link --force --overwrite php@$PHP_VERSION
        try pecl channel-update pecl.php.net
        try pecl install ast
    next
fi

if [ -z "$(brew ls --versions composer)" ]; then
    step "Install latest Composer"
        try brew install composer
    next
fi

step "Download latest PHP dependencies"
    mkdir -p $COMPOSER_DIR
    cd $COMPOSER_DIR
    try composer require drupal/coder drush/drush:8.* phan/phan phpmd/phpmd
    try phpcs --config-set installed_paths $COMPOSER_DIR/vendor/drupal/coder/coder_sniffer
    cd
next

if [ -z "$(brew ls --versions mysql)" ]; then
    step "Install latest MySQL"
        try brew install mysql
        try brew services start mysql
    next
    mysql_secure_installation
fi

if [ -z "$(brew ls --versions phpmyadmin)" ]; then
    step "Install latest PHPMyAdmin"
        try PHP_AUTOCONF="$(which autoconf)" brew install phpmyadmin
    next
fi

if [ -z "$(brew ls --versions nginx)" ]; then
    step "Install latest Nginx"
        brew install nginx
    next
fi

if [ -z "$(brew ls --versions jq)" ]; then
    step "Install latest jq"
        try brew install jq
    next
fi

step "Download latest ChromeDriver"
    CD_URL="https://chromedriver.storage.googleapis.com"
    CD_ZIP="chromedriver_mac64.zip"
    CD_VERSION=$(curl -Ls "$CD_URL/LATEST_RELEASE")
    try curl -Lso $CD_ZIP "$CD_URL/$CD_VERSION/$CD_ZIP"
    try unzip -oq $CD_ZIP -d ~/bin && rm -f $CD_ZIP
    try chmod +x ~/bin/chromedriver
next

if [ -z "$(brew ls --versions geckodriver)" ]; then
    step "Install latest GeckoDriver"
        try brew install geckodriver
    next
fi

step "Download latest jTDS JDBC driver"
    JTDS_URL=$(curl -Ls https://api.github.com/repos/milesibastos/jTDS/releases/latest | jq -r '.assets[].browser_download_url | select(contains("dist"))')
    JTDS_ZIP="jtds.zip"
    # Remove previous version of jTDS JDBC driver
    try rm -f ~/bin/jtds-*.jar
    try curl -Lso $JTDS_ZIP "$JTDS_URL"
    try unzip -oqj $JTDS_ZIP "jtds-*.jar" -d ~/bin && rm -f $JTDS_ZIP
next

if [ -z "$(brew ls --versions selenium-server-standalone)" ]; then
    step "Install latest Selenium server standalone"
        try brew install selenium-server-standalone
    next
fi

# Prompt for sudo password early on
sudo -s exit

step "Clean history and logs"
    try ~/bin/clean-hists-and-logs
next

step "Clean Docker containers and images"
    try ~/bin/docker-cleanup
next

step "Get virtualenv"
    try ~/bin/get-virtualenv
next

step "Show all files in finder"
    try ~/bin/osx-show-all-files
next
