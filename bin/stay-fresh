#!/bin/bash

#    Stay fresh - Remove all caches, logs, histories and brew upgrade.
#    Copyright (C) 1995-2020  Richard Huang <rickypc@users.noreply.github.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

LOCAL_BIN=/usr/local/bin
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# Source function library.
. $SCRIPT_DIR/functions

# See hidden files.
shopt -s dotglob

# Prompt for sudo password early on.
sudo -v

step "Clear Kernel caches"
  # try sudo update_dyld_shared_cache -force
  try qlmanage -r
  if [ -n "$(ps aux | grep Finder | grep -v grep)" ]; then
    try killall Finder
  fi
next

step "Purge inactive memory"
  try sudo /usr/sbin/purge
next

step "Clear log files"
  try sudo rm -f /var/log/*.bz2 /var/log/*.gz /var/log/*.old /var/log/*/*.gz
  try sudo find /Library/Logs/DiagnosticReports -type f -exec rm -f '{}' \; &>/dev/null
  try find ~/Library/Logs -type f -exec rm -f '{}' \; &>/dev/null
next

step "Clear history files"
  try :>~/.lesshst
  [ -f ~/.mysql_history ] && try :>~/.mysql_history
next

step "Clear Vim history files"
  try find ~/.vim/backup -mindepth 1 ! -name '.gitignore' -exec rm -rf -- {} +
  [ -d ~/.vim6 ] && try find ~/.vim6/backup -mindepth 1 ! -name '.gitignore' -exec rm -rf -- {} +
  try :>~/.viminfo
next

step "Clear caches"
  try rm -rf ~/.atom/.apm/*
  try find ~/Library/Caches -type f -exec rm -f '{}' \; &>/dev/null
  try rm -rf ~/Library/Containers/com.apple.Preview/*
  try find ~/Library/Developer/Xcode/Archives -type f -exec rm -f '{}' \; &>/dev/null
  try find ~/Library/Developer/Xcode/DerivedData -type f -exec rm -f '{}' \; &>/dev/null
  try command -v composer &>/dev/null && composer clearcache 2>/dev/null
  try command -v npm &>/dev/null && npm cache clean --force 2>/dev/null
next

step "Vacuum Outlook data"
  if [ -n "$(ps aux | grep "Microsoft Outlook" | grep -v grep)" ]; then
    killall "Microsoft Outlook"
  fi
  if [ -f "$HOME/Library/Group\ Containers/UBF8T346G9.Office/Outlook/Outlook\ 15\ Profiles/Main\ Profile/Data/Outlook.sqlite" ]; then
    try sqlite3 "$HOME/Library/Group\ Containers/UBF8T346G9.Office/Outlook/Outlook\ 15\ Profiles/Main\ Profile/Data/Outlook.sqlite" "PRAGMA integrity_check" && sqlite3 "$HOME/Library/Group\ Containers/UBF8T346G9.Office/Outlook/Outlook\ 15\ Profiles/Main\ Profile/Data/Outlook.sqlite" vacuum
  fi
next

# Clear docker containers and images.
$SCRIPT_DIR/docker-cleanup

step "Update Homebrew formulae"
  BREW_REPO=$(brew --repo)

  output_start
  for DIR in "$BREW_REPO" "$BREW_REPO"/Library/Taps/*/*; do
    [[ -d "$DIR/.git" ]] || continue
    cd "$DIR" || continue
    echo Housekeeping $DIR
    git gc --auto --prune
  done
  output_end

  cd
  # Update to latest Homebrew and latest formulaes as well.
  HOMEBREW_FORCE_BREWED_GIT=1 brew update
next

step "Upgrade Homebrew formulae"
  echo
  # Upgrade all installed unpinned brews.
  HOMEBREW_FORCE_BREWED_GIT=1 HOMEBREW_INSTALL_CLEANUP=1 brew upgrade --ignore-pinned
next

step "Clean Homebrew caches"
  echo
  # Cleanup files & symlinks older than 3 days.
  brew cleanup --prune=3 -s
  # Delete donwload cache.
  rm -rf "$(brew --cache)"
  # Repair brew tap.
  brew tap --repair
next

step "Activate default virtual env"
  # Make sure symlink exists.
  if [ ! -f $LOCAL_BIN/python ]; then
    try ln -sf $LOCAL_BIN/python3 $LOCAL_BIN/python
  fi
  if [ ! -f $LOCAL_BIN/pip ]; then
    try ln -sf $LOCAL_BIN/pip3 $LOCAL_BIN/pip
  fi
  try rm -rf $WORKON_HOME/default
  try $SCRIPT_DIR/get-virtualenv
  try . $WORKON_HOME/default/bin/activate
next

step "Activate Powerline"
  PYTHON_USER_BASE=`$LOCAL_BIN/python3 -m site --user-base`

  if [ -d "$PYTHON_USER_BASE/bin" ]; then
    # Remove old Python user base from the PATH.
    export PATH=${PATH/:$HOME\/Library\/Python\/[0-9].[0-9]\/bin}

    export PYTHON_USER_SITE=`$LOCAL_BIN/python3 -m site --user-site`

    if [[ $PATH != *$PYTHON_USER_BASE/bin* ]]; then
      export PATH=$PYTHON_USER_BASE/bin:$PATH
    fi
  fi

  if [ -z "$(pip3 list --user | grep powerline-gitstatus)" ]; then
    try $LOCAL_BIN/pip3 install --user awscli gitpython powerline-gitstatus powerline-status
    powerline-daemon -q
  else
    powerline-daemon -q --replace
  fi
next

# Clear {ba|z}sh history.
step "Clear shell history"
  :>~/.bash_history
  :>~/.zsh_history
  history -c
next
